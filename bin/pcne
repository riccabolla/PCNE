#!/usr/bin/env bash

# PCNE: Plasmid Copy Number Estimator v0.1.1

# --- Script Version ---
VERSION="0.1.1"

# --- Script Behavior ---
# Exit script on error
set -e
# Exit on pipe failures
set -o pipefail

# --- Print Banner ---
cat << "EOF"

   ____   ____ _   _ ____
  |  _ \ / ___| \ | | ____|
  | |_) | |   |  \| |  _|
  |  __/| |___| |\  | |___
  |_|    \____|_| \_|_____|
  Plasmid Copy Number Estimator v0.1.1 
  by riccabolla

EOF
# --- End Banner ---

# --- Define Colors ---
RESET='\e[0m'
GREEN='\e[0;32m'
RED_BOLD='\e[1;31m'
YELLOW_BOLD='\e[1;33m'
BLUE_BOLD='\e[1;34m'
MAGENTA='\e[0;35m'
CYAN_BOLD='\e[1;36m'
# --- End Define Colors ---

# --- Record Start Time ---
start_time=$(date +%s)

# --- Default Values ---
THREADS=1 
OUTPUT_PREFIX="pcne" 
KEEP_INTERMEDIATE=0 
# Initialize file path variables
CHR_FASTA=""
PLS_FASTA=""
ASSEMBLY_FASTA=""
CHR_LIST_FILE=""
PLS_LIST_FILE=""
READS_R1=""
READS_R2=""
# Initialize mode variables
MODE=0 # 0=Undetermined, 1=Separate Files, 2=Assembly+Lists
# --- End Default Values ---

# --- Find the location of the accompanying R script ---
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
RSCRIPT_PATH="${SCRIPT_DIR}/PCNE.R"

# Check if the R script actually exists at the expected location
if [ ! -f "${RSCRIPT_PATH}" ]; then
    echo -e "${RED_BOLD}Error: R script not found at expected location: ${RSCRIPT_PATH}${RESET}" >&2
    RSCRIPT_BASENAME=$(basename "${RSCRIPT_PATH}") # Will be PCNE.R
    RSCRIPT_PATH_FALLBACK=$(command -v "${RSCRIPT_BASENAME}")
    if [ -z "${RSCRIPT_PATH_FALLBACK}" ] || [ ! -f "${RSCRIPT_PATH_FALLBACK}" ]; then
         echo -e "${RED_BOLD}Error: R script '${RSCRIPT_BASENAME}' also not found in PATH.${RESET}" >&2
         exit 1
    else
         echo -e "${YELLOW_BOLD}Warning: Using R script found via PATH: ${RSCRIPT_PATH_FALLBACK}. Installation might be incomplete or incorrect.${RESET}" >&2
         RSCRIPT_PATH="${RSCRIPT_PATH_FALLBACK}" 
    fi
fi
# --- End of script location finding ---


# --- Function: Print Usage ---
usage() {
  local script_name=$(basename "$0")
  echo -e "${BLUE_BOLD}Usage:${RESET}"
  echo -e "  ${script_name} [Mode 1] OR [Mode 2] [Common Required] [Optional]"
  echo -e "\n  ${BLUE_BOLD}Mode 1:${RESET}"
  echo "    -c FILE : Path to chromosome contigs FASTA file (Required)"
  echo "    -p FILE : Path to plasmid contigs FASTA file (Required)"
  echo -e "\n  ${BLUE_BOLD}Mode 2:${RESET}"
  echo "    -a FILE : Path to the assembled genome FASTA file (Required)"
  echo "    -C FILE : Path to file containing chromosome contig names (Required)"
  echo "    -P FILE : Path to file containing plasmid contig names (Required)"
  echo -e "\n  ${BLUE_BOLD}Common Required:${RESET}"
  echo "    -r FILE : Path to forward reads (FASTQ format, e.g., R1) (Mandatory)"
  echo "    -R FILE : Path to reverse reads (FASTQ format, e.g., R2) (Mandatory)"
  echo -e "\n  ${BLUE_BOLD}Optional:${RESET}"
  echo "    -t INT  : Number of threads (default: ${THREADS})"
  echo "    -o STR  : Prefix for output files (default: ${OUTPUT_PREFIX})"
  echo "    -k      : Keep intermediate files (BAM, BAI, BWA index) [Default: Remove]"
  echo "    -v      : Display version information and exit"
  echo "    -h      : Display this help message and exit"
}

# --- Parse Command-Line Arguments ---
while getopts ":a:c:p:C:P:r:R:t:o:hkv" opt; do
  case ${opt} in
    a ) ASSEMBLY_FASTA=$OPTARG ;;
    c ) CHR_FASTA=$OPTARG ;;
    p ) PLS_FASTA=$OPTARG ;;
    C ) CHR_LIST_FILE=$OPTARG ;;
    P ) PLS_LIST_FILE=$OPTARG ;;
    r ) READS_R1=$OPTARG ;;
    R ) READS_R2=$OPTARG ;;
    t ) THREADS=$OPTARG ;;
    o ) OUTPUT_PREFIX=$OPTARG ;;
    k ) KEEP_INTERMEDIATE=1 ;; 
    v ) echo "$(basename "$0") version ${VERSION}"; exit 0 ;; 
    h ) usage; exit 0 ;;
    \? ) echo -e "${RED_BOLD}Error: Invalid option: -$OPTARG${RESET}" >&2; usage; exit 1 ;;
    : ) echo -e "${RED_BOLD}Error: Option -$OPTARG requires an argument.${RESET}" >&2; usage; exit 1 ;;
  esac
done
shift $((OPTIND -1))

# --- Define Output File Names (LOG_FILE depends on OUTPUT_PREFIX) ---
LOG_FILE="${OUTPUT_PREFIX}.log"
COMBINED_REF="${OUTPUT_PREFIX}_combined_reference.fasta" 
ALIGNMENT_REF="" 
SORTED_BAM="${OUTPUT_PREFIX}_alignment.sorted.bam"
COVERAGE_SUMMARY="${OUTPUT_PREFIX}_coverage_summary.full.txt" 
FINAL_REPORT_TSV="${OUTPUT_PREFIX}_results.tsv"
# Define temporary file names
chr_name_list_arg=""
pls_name_list_arg=""
tmp_chr_list="${OUTPUT_PREFIX}_chr_names.tmp"
tmp_pls_list="${OUTPUT_PREFIX}_pls_names.tmp"
# --- End Output File Names ---

# --- Initialize Log File ---
echo "PCNE Log File - v${VERSION}" > "${LOG_FILE}"
echo "Start Time: $(date)" >> "${LOG_FILE}"
cmd_line_args=$(printf " %q" "$@")
original_args_string_placeholder="<<User provided args here>>" 
echo "Command: $(basename "$0") ${original_args_string_placeholder} ${cmd_line_args}" >> "${LOG_FILE}"
echo "--------------------" >> "${LOG_FILE}"
# --- End Log Init ---

# --- Argument Validation Logic ---
if [[ -n "${CHR_FASTA}" && -n "${PLS_FASTA}" ]]; then
    if [[ -n "${ASSEMBLY_FASTA}" || -n "${CHR_LIST_FILE}" || -n "${PLS_LIST_FILE}" ]]; then echo -e "${RED_BOLD}Error: Conflicting arguments. Cannot use -c/-p together with -a/-C/-P.${RESET}" >&2; usage; exit 1; fi
    MODE=1
elif [[ -n "${ASSEMBLY_FASTA}" && -n "${CHR_LIST_FILE}" && -n "${PLS_LIST_FILE}" ]]; then
    if [[ -n "${CHR_FASTA}" || -n "${PLS_FASTA}" ]]; then echo -e "${RED_BOLD}Error: Conflicting arguments. Cannot use -a/-C/-P together with -c/-p.${RESET}" >&2; usage; exit 1; fi
    MODE=2
fi
if [[ ${MODE} -eq 0 ]]; then echo -e "${RED_BOLD}Error: Invalid or incomplete argument combination for input files.${RESET}" >&2; usage; exit 1; fi
if [[ -z "${READS_R1}" || -z "${READS_R2}" ]]; then echo -e "${RED_BOLD}Error: Missing mandatory read files (-r and -R).${RESET}" >&2; usage; exit 1; fi
# --- End Argument Validation ---


# --- Check Input Files Exist ---
echo -e "${MAGENTA}Checking existence of input files...${RESET}" | tee -a "${LOG_FILE}"
if [ ! -f "${READS_R1}" ]; then echo -e "${RED_BOLD}Error: Reads R1 file not found: ${READS_R1}${RESET}" >&2; exit 1; fi
if [ ! -f "${READS_R2}" ]; then echo -e "${RED_BOLD}Error: Reads R2 file not found: ${READS_R2}${RESET}" >&2; exit 1; fi
if [[ ${MODE} -eq 1 ]]; then
    if [ ! -f "${CHR_FASTA}" ]; then echo -e "${RED_BOLD}Error: Chromosome FASTA file (-c) not found: ${CHR_FASTA}${RESET}" >&2; exit 1; fi
    if [ ! -f "${PLS_FASTA}" ]; then echo -e "${RED_BOLD}Error: Plasmid FASTA file (-p) not found: ${PLS_FASTA}${RESET}" >&2; exit 1; fi
elif [[ ${MODE} -eq 2 ]]; then
    if [ ! -f "${ASSEMBLY_FASTA}" ]; then echo -e "${RED_BOLD}Error: Assembly FASTA file (-a) not found: ${ASSEMBLY_FASTA}${RESET}" >&2; exit 1; fi
    if [ ! -f "${CHR_LIST_FILE}" ]; then echo -e "${RED_BOLD}Error: Chromosome list file (-C) not found: ${CHR_LIST_FILE}${RESET}" >&2; exit 1; fi
    if [ ! -f "${PLS_LIST_FILE}" ]; then echo -e "${RED_BOLD}Error: Plasmid list file (-P) not found: ${PLS_LIST_FILE}${RESET}" >&2; exit 1; fi
fi
echo -e "${GREEN}All required input files found.${RESET}" | tee -a "${LOG_FILE}"
# --- End File Checks ---

# --- Check Tool Dependencies ---
echo -e "${MAGENTA}Checking dependencies...${RESET}" | tee -a "${LOG_FILE}"
command -v bwa >/dev/null 2>&1 || { echo -e >&2 "${RED_BOLD}Error: bwa not found in PATH.${RESET}"; exit 1; }
command -v samtools >/dev/null 2>&1 || { echo -e >&2 "${RED_BOLD}Error: samtools not found in PATH.${RESET}"; exit 1; }
command -v Rscript >/dev/null 2>&1 || { echo -e >&2 "${RED_BOLD}Error: Rscript not found in PATH.${RESET}"; exit 1; }
command -v awk >/dev/null 2>&1 || { echo -e >&2 "${RED_BOLD}Error: awk not found in PATH.${RESET}"; exit 1; } 
command -v grep >/dev/null 2>&1 || { echo -e >&2 "${RED_BOLD}Error: grep not found in PATH.${RESET}"; exit 1; } 
command -v sed >/dev/null 2>&1 || { echo -e >&2 "${RED_BOLD}Error: sed not found in PATH.${RESET}"; exit 1; } 
echo -e "${GREEN}Dependencies found.${RESET}" | tee -a "${LOG_FILE}"
# --- End Dependency Checks ---

# --- Print Configuration ---
echo -e "${BLUE_BOLD}--- Starting Plasmid Copy Number Estimation v${VERSION} ---${RESET}" | tee -a "${LOG_FILE}"
echo -e "${MAGENTA}Input Mode         : ${MODE}${RESET}" | tee -a "${LOG_FILE}"
if [[ ${MODE} -eq 1 ]]; then
    echo -e "${MAGENTA}Chromosome FASTA (-c): ${CHR_FASTA}${RESET}" | tee -a "${LOG_FILE}"
    echo -e "${MAGENTA}Plasmid FASTA    (-p): ${PLS_FASTA}${RESET}" | tee -a "${LOG_FILE}"
elif [[ ${MODE} -eq 2 ]]; then
    echo -e "${MAGENTA}Assembly FASTA   (-a): ${ASSEMBLY_FASTA}${RESET}" | tee -a "${LOG_FILE}"
    echo -e "${MAGENTA}Chromosome List  (-C): ${CHR_LIST_FILE}${RESET}" | tee -a "${LOG_FILE}"
    echo -e "${MAGENTA}Plasmid List     (-P): ${PLS_LIST_FILE}${RESET}" | tee -a "${LOG_FILE}"
fi
echo -e "${MAGENTA}Reads R1         (-r): ${READS_R1}${RESET}" | tee -a "${LOG_FILE}"
echo -e "${MAGENTA}Reads R2         (-R): ${READS_R2}${RESET}" | tee -a "${LOG_FILE}"
echo -e "${MAGENTA}Threads          (-t): ${THREADS}${RESET}" | tee -a "${LOG_FILE}"
echo -e "${MAGENTA}Output Prefix    (-o): ${OUTPUT_PREFIX}${RESET}" | tee -a "${LOG_FILE}"
echo -e "${MAGENTA}Keep Intermediate  (-k): ${KEEP_INTERMEDIATE}${RESET}" | tee -a "${LOG_FILE}"
echo -e "${MAGENTA}Log File           : ${LOG_FILE}${RESET}" | tee -a "${LOG_FILE}"
echo -e "${BLUE_BOLD}-----------------------------------------------${RESET}" | tee -a "${LOG_FILE}"
# --- End Print Configuration ---

# --- Prepare arguments for R script ---
echo -e "${MAGENTA}Preparing arguments for R script...${RESET}" | tee -a "${LOG_FILE}"
if [[ ${MODE} -eq 1 ]]; then
    echo "Extracting chromosome names from ${CHR_FASTA}..." | tee -a "${LOG_FILE}"
    grep '^>' "${CHR_FASTA}" | sed 's/>//; s/ .*//' > "${tmp_chr_list}"
    if [ ! -s "${tmp_chr_list}" ]; then echo -e "${YELLOW_BOLD}Warning: Failed to extract chromosome names from ${CHR_FASTA}, or file was empty.${RESET}" >&2 | tee -a "${LOG_FILE}"; fi
    chr_name_list_arg="${tmp_chr_list}"

    echo "Extracting plasmid names from ${PLS_FASTA}..." | tee -a "${LOG_FILE}"
    grep '^>' "${PLS_FASTA}" | sed 's/>//; s/ .*//' > "${tmp_pls_list}"
    if [ ! -s "${tmp_pls_list}" ]; then echo -e "${RED_BOLD}Error: Failed to extract plasmid names from ${PLS_FASTA}, or file was empty.${RESET}" >&2; rm -f $tmp_chr_list; exit 1; fi
    pls_name_list_arg="${tmp_pls_list}"
elif [[ ${MODE} -eq 2 ]]; then
    echo "Using chromosome names from ${CHR_LIST_FILE}..." | tee -a "${LOG_FILE}"
    chr_name_list_arg="${CHR_LIST_FILE}"
    echo "Using plasmid names from ${PLS_LIST_FILE}..." | tee -a "${LOG_FILE}"
    pls_name_list_arg="${PLS_LIST_FILE}"
fi
echo -e "${GREEN}Arguments prepared.${RESET}" | tee -a "${LOG_FILE}"
# --- End argument preparation ---

# --- Workflow Steps ---

# Step 1: Define/Create Reference for Alignment
echo -e "${CYAN_BOLD}[Step 1/8] Defining/Creating reference for alignment...${RESET}" | tee -a "${LOG_FILE}"
if [[ ${MODE} -eq 1 ]]; then
    echo "Mode 1: Concatenating ${CHR_FASTA} and ${PLS_FASTA}..." | tee -a "${LOG_FILE}"
    ALIGNMENT_REF="${COMBINED_REF}"
    (cat "${CHR_FASTA}" "${PLS_FASTA}" > "${ALIGNMENT_REF}") >> "${LOG_FILE}" 2>&1
    if [ $? -ne 0 ]; then echo -e "${RED_BOLD}Error during concatenation. Check ${LOG_FILE}${RESET}" >&2; exit 1; fi
    echo -e "${GREEN}Combined reference file created: ${ALIGNMENT_REF}${RESET}" | tee -a "${LOG_FILE}"
else
    # Mode 2 uses the input assembly directly
    echo "Mode 2: Using assembly ${ASSEMBLY_FASTA} as reference..." | tee -a "${LOG_FILE}"
    ALIGNMENT_REF="${ASSEMBLY_FASTA}"
    echo -e "${GREEN}Reference for alignment set to: ${ALIGNMENT_REF}${RESET}" | tee -a "${LOG_FILE}"
fi
# --- End Step 1 ---

# Step 2: Index Alignment Reference
echo -e "${CYAN_BOLD}[Step 2/8] Indexing alignment reference (${ALIGNMENT_REF})...${RESET}" | tee -a "${LOG_FILE}"
if [ -f "${ALIGNMENT_REF}.bwt" ]; then
    echo "Index files found, skipping indexing." | tee -a "${LOG_FILE}"
else
    (bwa index "${ALIGNMENT_REF}") >> "${LOG_FILE}" 2>&1
    if [ $? -ne 0 ]; then echo -e "${RED_BOLD}Error during BWA indexing. Check ${LOG_FILE}${RESET}" >&2; exit 1; fi
fi
echo -e "${GREEN}Done.${RESET}" | tee -a "${LOG_FILE}"
# --- End Step 2 ---

# Step 3: Align Reads
echo -e "${CYAN_BOLD}[Step 3/8] Aligning reads with BWA-MEM...${RESET}" | tee -a "${LOG_FILE}"
UNSORTED_BAM="${OUTPUT_PREFIX}_alignment.unsorted.bam"
(bwa mem -t ${THREADS} "${ALIGNMENT_REF}" "${READS_R1}" "${READS_R2}" | \
  samtools view -@ ${THREADS} -Sb -o "${UNSORTED_BAM}") >> "${LOG_FILE}" 2>&1
if [ $? -ne 0 ]; then echo -e "${RED_BOLD}Error during BWA alignment or Samtools view. Check ${LOG_FILE}${RESET}" >&2; exit 1; fi
echo -e "${GREEN}Done.${RESET}" | tee -a "${LOG_FILE}"
# --- End Step 3 ---

# Step 4: Sort BAM
echo -e "${CYAN_BOLD}[Step 4/8] Sorting BAM file...${RESET}" | tee -a "${LOG_FILE}"
(samtools sort -@ ${THREADS} -o "${SORTED_BAM}" "${UNSORTED_BAM}") >> "${LOG_FILE}" 2>&1
if [ $? -ne 0 ]; then echo -e "${RED_BOLD}Error during Samtools sort. Check ${LOG_FILE}${RESET}" >&2; exit 1; fi
rm -f "${UNSORTED_BAM}" 
echo -e "${GREEN}Done. Sorted BAM: ${SORTED_BAM}${RESET}" | tee -a "${LOG_FILE}"
# --- End Step 4 ---

# Step 5: Index Sorted BAM
echo -e "${CYAN_BOLD}[Step 5/8] Indexing sorted BAM file...${RESET}" | tee -a "${LOG_FILE}"
(samtools index -@ ${THREADS} "${SORTED_BAM}") >> "${LOG_FILE}" 2>&1
if [ $? -ne 0 ]; then echo -e "${RED_BOLD}Error during Samtools index. Check ${LOG_FILE}${RESET}" >&2; exit 1; fi
echo -e "${GREEN}Done.${RESET}" | tee -a "${LOG_FILE}"
# --- End Step 5 ---

# Step 6: Calculate Coverage
echo -e "${CYAN_BOLD}[Step 6/8] Calculating coverage...${RESET}" | tee -a "${LOG_FILE}"
echo "Running samtools coverage (output: ${COVERAGE_SUMMARY})..." | tee -a "${LOG_FILE}"
(samtools coverage "${SORTED_BAM}" -o "${COVERAGE_SUMMARY}") >> "${LOG_FILE}" 2>&1
if [ $? -ne 0 ]; then echo -e "${RED_BOLD}Error running samtools coverage. Check ${LOG_FILE}${RESET}" >&2; exit 1; fi
if [ ! -s "${COVERAGE_SUMMARY}" ]; then echo -e "${RED_BOLD}Error: Coverage summary file is empty.${RESET}" >&2; exit 1; fi
echo -e "${GREEN}Coverage summary generated.${RESET}" | tee -a "${LOG_FILE}"
# --- End Step 6 ---

# Step 7: Calculate Final Copy Numbers using R
echo -e "${CYAN_BOLD}[Step 7/8] Calculating copy numbers via R...${RESET}" | tee -a "${LOG_FILE}"
(Rscript "${RSCRIPT_PATH}" \
    "${COVERAGE_SUMMARY}" \
    "${chr_name_list_arg}" \
    "${pls_name_list_arg}" \
    "${FINAL_REPORT_TSV}") >> "${LOG_FILE}" 2>&1
R_EXIT_CODE=$?
# --- End Step 7 ---

# Step 8: Cleanup
echo -e "${CYAN_BOLD}[Step 8/8] Cleaning up intermediate files...${RESET}" | tee -a "${LOG_FILE}"
if [[ -f "${tmp_chr_list}" ]]; then rm -f "${tmp_chr_list}"; fi
if [[ -f "${tmp_pls_list}" ]]; then rm -f "${tmp_pls_list}"; fi

# Conditionally remove other intermediates unless -k was specified
if [[ ${KEEP_INTERMEDIATE} -eq 0 ]]; then
    echo "Removing intermediate files (use -k to keep BAM/BAI/Index/Coverage)..." | tee -a "${LOG_FILE}"
    rm -f "${SORTED_BAM}" "${SORTED_BAM}.bai" "${COVERAGE_SUMMARY}"
    if [[ -n "${ALIGNMENT_REF}" ]]; then
      find "$(dirname "${ALIGNMENT_REF}")" -maxdepth 1 -name "$(basename "${ALIGNMENT_REF}").*" \
           \( -name '*.amb' -o -name '*.ann' -o -name '*.bwt' -o -name '*.pac' -o -name '*.sa' -o -name '*.fai' \) -delete >> "${LOG_FILE}" 2>&1
    fi
    if [[ ${MODE} -eq 1 && -n "${ALIGNMENT_REF}" && -f "${ALIGNMENT_REF}" ]]; then
        rm -f "${ALIGNMENT_REF}"
    fi
else
    echo "Keeping intermediate files (--keep-intermediate specified)." | tee -a "${LOG_FILE}"
    echo "Kept: ${SORTED_BAM}, ${SORTED_BAM}.bai, ${COVERAGE_SUMMARY}" | tee -a "${LOG_FILE}"
    if [[ -n "${ALIGNMENT_REF}" ]]; then echo "Kept: BWA index files for ${ALIGNMENT_REF}" | tee -a "${LOG_FILE}"; fi
    if [[ ${MODE} -eq 1 && -n "${ALIGNMENT_REF}" && -f "${ALIGNMENT_REF}" ]]; then echo "Kept: ${ALIGNMENT_REF}" | tee -a "${LOG_FILE}"; fi
fi
echo -e "${GREEN}Cleanup complete.${RESET}" | tee -a "${LOG_FILE}"
# --- End Step 8 ---

# Check R script exit code after cleanup
if [ ${R_EXIT_CODE} -ne 0 ]; then
     echo -e "${RED_BOLD}Error: R script failed with exit code ${R_EXIT_CODE}. Check ${LOG_FILE}${RESET}" >&2
     exit 1
fi

# --- Calculate and Print Elapsed Time ---
end_time=$(date +%s)
duration=$((end_time - start_time))
secs=$((duration % 60))
mins=$(( (duration / 60) % 60 ))
hrs=$(( duration / 3600 ))
echo -e "${BLUE_BOLD}-----------------------------------------------${RESET}" | tee -a "${LOG_FILE}"
echo -e "${GREEN}✅ Workflow Complete ${RESET}" | tee -a "${LOG_FILE}"
printf "${GREEN}   Total Elapsed Time: %02d:%02d:%02d${RESET}\n" $hrs $mins $secs | tee -a "${LOG_FILE}"
echo -e "${GREEN}   Log file: ${LOG_FILE}${RESET}" | tee -a "${LOG_FILE}"
echo -e "${GREEN}   Final report: ${FINAL_REPORT_TSV}${RESET}" | tee -a "${LOG_FILE}"
echo -e "${BLUE_BOLD}-----------------------------------------------${RESET}" | tee -a "${LOG_FILE}"

exit 0
```